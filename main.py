def validasi(data,k):
    #3
    validasi = []
    for i in range(len(data)):
        index = i+1
        if(i < len(data)-k):
            sumValid = 0
            for j in range(index,index+k):
                if(data[index][22]==data[j+1][22]):
                    sumValid += 1
        else:
            sumValid = 0
            for j in range(index,index+((len(data)-index))):
                if(data[index][22]==data[j+1][22]):
                    sumValid += 1
            for l in range(k-(len(data)-index)):
                if(data[index][22]==data[index-(l+1)][22]):
                    sumValid += 1
        nilaiValidasi = sumValid/k
        print(i,"-Validasi : ",nilaiValidasi)
        validasi.append(nilaiValidasi)
    return 0

def ruleKhusus(data):
    dictRule = {'ruleA':['b'],
                'ruleE':['y','f','m','p','s'],
                'ruleI':['b','r'],
                'ruleO':['b','c','y'],
                'ruleQ':['y'],
                'ruleR':['n'],
                'ruleS':['l','n'],
                'ruleT':['r']
                }
    if(data[0] in dictRule['ruleA'] or data[4] in dictRule['ruleE']
    or data[8] in dictRule['ruleI'] or data[14] in dictRule['ruleO']
    or data[16] in dictRule['ruleQ'] or data[17] in dictRule['ruleR']
    or data[18] in dictRule['ruleS'] or data[19] in dictRule['ruleT']):
        return True
    else:
        return False

def numeric(dataInput):
    dictNumeric = {1:{'b':0.11,'c':1,'x':0.47,'f':0.49,'k':0.72,'s':0},
                2:{'f':0.33,'g':1,'y':0.54,'s':0.55},
                3:{'n':0.45,'b':0.71,'c':0.27,'g':0.44,'r':0,'p':0.61,'u':0,'e':0.58,'w':0.31,'y':0.63},
                4:{'t':0.18,'f':0.69},
                5:{'a':0,'l':0,'c':1,'y':1,'f':1,'m':1,'n':0.03,'p':1,'s':1},
                6:{'a':0.09,'d':0,'f':0.49,'n':0},
                7:{'c':0.56,'w':0.09,'d':0},
                8:{'b':0.3,'n':0.89},
                9:{'k':0.16,'n':0.11,'b':1,'h':0.72,'g':0.67,'r':1,'o':0,'p':0.43,'u':0.1,'e':0,'w':0.2,'y':0.26},
                10:{'e':0.54,'t':0.44},
                11:{'b':0.49,'c':0.08,'u':0,'e':0.23,'z':0,'r':0,'?':0.71},
                12:{'f':0.26,'y':0.33,'k':0.94,'s':0.3},
                13:{'f':0.24,'y':0.27,'k':0.94,'s':0.31},
                14:{'n':0.96,'b':1,'c':1,'g':0,'o':0,'p':0.69,'e':0,'w':0.38,'y':1},
                15:{'n':0.88,'b':1,'c':1,'g':0,'o':0,'p':0.69,'e':0,'w':0.38,'y':1},
                16:{'p':0.48,'u':0},
                17:{'n':0,'o':0,'w':0.49,'y':1},
                18:{'n':1,'o':0.51,'t':0.12},
                19:{'c':0,'e':0.64,'f':0,'l':1,'n':1,'p':0.21,'s':0,'z':0},
                20:{'k':0.12,'n':0.11,'b':0,'h':0.97,'r':1,'o':0,'u':0,'w':0.76,'y':0},
                21:{'a':0,'c':0.15,'n':0,'s':0.29,'v':0.7,'y':0.38},
                22:{'g':0.34,'l':0.71,'m':0.12,'p':0.88,'u':0.74,'w':0,'d':0.4}
                }
    dataBaru = []
    for i in range(len(dataInput)):
        dataBaru.append(dictNumeric[i+1][dataInput[i]])
    return dataBaru

def RUN():
    dictLatih = {1:[0.47,0.55,0.45,0.18,1,0.49,0.56,0.89,0.16,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.74,'p'],
                2:[0.47,0.55,0.63,0.18,0,0.49,0.56,0.3,0.16,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.34,'e'],
                3:[0.11,0.55,0.31,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.12,'e'],
                4:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.11,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.74,'p'],
                5:[0.47,0.55,0.44,0.69,0.03,0.49,0.09,0.3,0.16,0.44,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.64,0.11,0,0.34,'e'],
                6:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.34,'e'],
                7:[0.11,0.55,0.31,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.12,'e'],
                8:[0.11,0.54,0.31,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.12,'e'],
                9:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.43,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.7,0.34,'p'],
                10:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.12,'e'],
                11:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0,0.34,'e'],
                12:[0.47,0.54,0.63,0.18,0,0.49,0.56,0.3,0.11,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0.29,0.12,'e'],
                13:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.2,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.34,'e'],
                14:[0.47,0.54,0.31,0.18,1,0.49,0.56,0.89,0.16,0.54,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.7,0.74,'p'],
                15:[0.47,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.29,0.34,'e'],
                16:[0.49,0.33,0.31,0.69,0.03,0.49,0.09,0.3,0.16,0.44,0.23,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.64,0.11,0.29,0.34,'e'],
                17:[0.11,0.55,0.63,0.18,0,0.49,0.56,0.3,0.67,0.54,0.08,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.12,0,0.34,'e'],
                18:[0.47,0.33,0.44,0.69,1,0.49,0.56,0.3,0.43,0.54,0.49,0.94,0.94,1,1,0.48,0.49,0.51,1,0.97,0.38,0.34,'p'],
                19:[0.49,0.54,0.45,0.18,0.03,0.49,0.56,0.3,0.11,0.44,0.49,0.3,0.31,0,0.69,0.48,0.49,0.51,0.21,0.12,0.38,0.4,'e'],
                20:[0.47,0.54,0.45,0.18,0.03,0.49,0.56,0.3,0.11,0.44,0.49,0.3,0.31,0.38,0,0.48,0.49,0.51,0.21,0.12,0.7,0.4,'e'],
                21:[0.49,0.33,0.58,0.18,0.03,0.49,0.56,0.3,0.43,0.44,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.51,0.21,0.11,0.38,0.4,'e'],
                22:[0.49,0.55,0.71,0.18,0.03,0.49,0.56,0.3,1,0.54,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,1,0.7,0.34,'p'],
                23:[0.49,0.54,0.63,0.69,1,0.49,0.56,0.3,0.67,0.54,0.49,0.94,0.94,1,1,0.48,0.49,0.51,1,0.97,0.7,0.34,'p'],
                24:[0.11,0.54,0.71,0.18,0.03,0.49,0.56,0.3,0.67,0.54,0.49,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,1,0.7,0.34,'p'],
                25:[0.72,0.54,0.71,0.18,0.03,0.49,0.56,0.3,0,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.64,0.76,0.15,0,'e'],
                26:[0.47,0.54,0.31,0.69,0.03,0.49,0.56,0.89,0.43,0.54,0.71,0.3,0.24,0.38,0.38,0.48,0.49,0.51,0,0.97,0.38,0.4,'e'],
                27:[0.49,0.54,0.63,0.69,1,0.49,0.56,0.3,0.67,0.54,0.49,0.94,0.94,0.96,0.69,0.48,0.49,0.51,1,0.97,0.38,0.34,'p'],
                28:[0.11,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.26,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                29:[0.49,0.54,0.58,0.69,1,0.09,0.56,0.3,0.2,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                30:[1,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.26,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                31:[0.72,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.2,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                32:[1,0.54,0.63,0.69,0.03,0.49,0.09,0.89,0.2,0.54,0.08,0.33,0.27,1,1,0.48,1,0.51,0.64,0.76,0.15,0.71,'p'],
                33:[0.72,0.54,0.58,0.69,1,0.09,0.56,0.3,0.2,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                34:[0.72,0.54,0.27,0.69,1,0.09,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                35:[0.47,0.54,0.27,0.69,1,0.49,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                36:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.94,0.69,0.69,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                37:[0.72,0.54,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                38:[0.11,0.55,0.31,0.69,0.03,0.49,0.09,0.3,0.2,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,0.76,0,0.34,'e'],
                39:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0.11,0.7,0.71,'e'],
                40:[0.72,0.55,0.31,0.69,0.03,0.49,0.09,0.3,0.43,0.54,0.71,0.3,0.31,0.38,0.38,0.48,0.49,0.12,0.21,0.76,0,0.34,'e'],
                41:[0.72,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                42:[0.72,0.54,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.94,0.69,0.69,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                43:[0.49,0.54,0.27,0.69,1,0.09,0.56,0.3,0.26,0.54,0.08,0.94,0.27,1,1,0.48,0.49,1,1,0.76,0.15,0.4,'p'],
                44:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                45:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.3,0.94,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p'],
                46:[0.72,0.55,0.58,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                47:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.94,0.31,0.69,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.4,'p'],
                48:[0.72,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.15,0.71,'e'],
                49:[0.47,0.55,0.45,0.69,0.03,0.09,0.56,0.3,0.26,0.54,0.71,0.3,0.31,0,0,0.48,0,0.51,0.21,0,0.7,0.71,'e'],
                50:[0.72,0.54,0.45,0.69,1,0.49,0.56,0.89,1,0.44,0.71,0.3,0.94,0.38,0.38,0.48,0.49,0.51,0.64,0.76,0.7,0.71,'p']
                }
    # data = ['x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x','x']
    data = ['x','f','n','f','n','f','w','b','n','t','e','s','f','w','w','p','w','o','e','k','a','g']
    k = 5
    hasil = ""
    if(ruleKhusus(data)==True):
        hasil ="Beracun"
    else:
        dataBaru = numeric(data)
        # print(len(dictLatih))
        validasi(dictLatih,k)
        # print(dataBaru)




if __name__ == '__main__':
    RUN()